AWSTemplateFormatVersion: 2010-09-09
Description: This template creates the VPC, Security groups, RDS and EC2 instance.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "VPC CIDR"
        Parameters:
          - VpcCIDR
      - 
        Label:
          default: "Subnet CIDR"
        Parameters:
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR
      - 
        Label:  
          default: "EC2 Parameters"
        Parameters:
          - InstanceType
          - EC2InstanceSecurityGroupName
          - KeyName
          - AmazonImageID
      - Label:
          default: "DB and S3 and RDS"
        Parameters:
          - DBSecurityGroupName
          - EnvironmentName
          - RDSUsername
          - RDSUserPassword
      - 
        Label:  
          default: "SSH CIDR"
        Parameters:
          - SSHLocation

Parameters:
  VpcCIDR:  
    Description: VPC
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CIDR:
    Description: public subset 1
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet2CIDR:
    Description: public subset 2
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet3CIDR:
    Description: public subset 3
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet1CIDR:
    Description: private subset 1
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet2CIDR:
    Description: private subset 2
    Type: String 
    Default: 10.0.4.0/24
  PrivateSubnet3CIDR:
    Description: private subset 3
    Type: String
    Default: 10.0.5.0/24

  InstanceType:
    Description: EC2 instance
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro]
  


  EC2InstanceSecurityGroupName:
    Description: Security Group
    Type: String
    Default: application

  DBSecurityGroupName:
    Description: Security Group
    Type: String
    Default: "database"

  EnvironmentName:
    Description: Environment name
    Type: String
    Default: "csye6225"

  RDSDBName:
    Description: RDS DB
    Type: String 
    Default: "csye6225"
  
  RDSPort:
    Description: RDS Port
    Type: Number
    Default: 3306

  RDSUsername:
    Description: RDS Username
    Type: String
    Default: "csye6225"
  
  RDSUserPassword:
    Description: RDS Password
    Type: String
    Default: "88888888"

  AmazonImageID:
    Description: The ID of Amazon Machine Image(AMI)
    Type: String
    Default: "ami-05135ead18fc7ff17"

  KeyName:
    Description: KeyPair name
    Type: AWS::EC2::KeyPair::KeyName
    Default: aws-01
    ConstraintDescription: Existing EC2 KeyPair

  HostedZoneId: 
    Description: hosted zone Id
    Type: String 
    Default: "Z0812881260U9UBYLHI3Y"
  DNSRecordName: 
    Description: DNS Record
    Type: String
    Default: "demo.weixinwang.me"

Resources:
  VPC: 
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: Test VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: Name
          Value: Test InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: Public Subnet 2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: Public Subnet 3

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: Private Subnet 1
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: Private Subnet 2 

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: Private Subnet 3

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: Private Route Table

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3 

  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Webapp application
      GroupName: !Ref EC2InstanceSecurityGroupName
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: EC2 Security Group

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "DB security group"
      GroupName: !Ref DBSecurityGroupName
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2InstanceSecurityGroup
      Tags: 
        - Key: Name
          Value: DB Security Group

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties: 
      BucketName: !Join
        - "-"
        - - "csye6225-fall"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          - !Ref EnvironmentName
          - "weixin"
      BucketEncryption: 
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration: 
        Rules:
          - Id: MoveFromStandardToStandard_IA
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      Tags: 
        - Key: Name
          Value: S3 Bucket

  RDSParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties: 
      Description: Using MySQL 8.0 same with local version
      Family: mysql8.0
      Tags: 
        - Key: Name
          Value: RDS Parameter Group

  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Private Subnet Group for MySQL
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Tags: 
        - Key: Name
          Value: RDS Subnet Group

  RDSInstance:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - RDSParameterGroup
      - RDSSubnetGroup
      - DBSecurityGroup
    Properties: 
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: csye6225
      DBName: !Ref RDSDBName
      DBParameterGroupName: !Ref RDSParameterGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Engine: MySQL
      EngineVersion: 8.0.30
      MasterUsername: !Ref RDSUsername
      MasterUserPassword: !Ref RDSUserPassword
      MultiAZ: false
      Port: !Ref RDSPort
      PubliclyAccessible: false
      StorageEncrypted: true
      VPCSecurityGroups: 
        - !Ref DBSecurityGroup
      Tags: 
        - Key: Name
          Value: RDS Instance

  EC2InstanceIAMRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies: 
        - PolicyName: WebAppS3
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${S3Bucket}
                  - !Sub arn:aws:s3:::${S3Bucket}/*

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: 
       - !Ref EC2InstanceIAMRole

  

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds: 
        - !GetAtt EC2InstanceSecurityGroup.GroupId
      KeyName: !Ref KeyName
      ImageId: !Ref AmazonImageID
      IamInstanceProfile: !Ref EC2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: "gp2"
            VolumeSize: "50"
            DeleteOnTermination: "true"
      Tags:
        - Key: Name
          Value: Weixin
      UserData:
        Fn::Base64: 
          !Sub |
          #!/bin/bash
          RDS_DB_NAME=${RDSDBName}
          RDS_PORT=${RDSPort}
          RDS_USERNAME=${RDSUsername}
          RDS_PASSWORD=${RDSUserPassword}
          RDS_HOST=${RDSInstance.Endpoint.Address}
          BUCKET_NAME=${S3Bucket}
          AWS_REGION=${AWS::Region}
          {
            echo "RDS_DB_NAME=$RDS_DB_NAME"
            echo "RDS_PORT=$RDS_PORT"
            echo "RDS_USERNAME=$RDS_USERNAME"
            echo "RDS_PASSWORD=$RDS_PASSWORD"
            echo "RDS_HOST=$RDS_HOST"
            echo "BUCKET_NAME=$BUCKET_NAME"
            echo "AWS_REGION=$AWS_REGION"
          } >>/home/ubuntu/.env
          mysql -u $RDS_USERNAME -p$RDS_PASSWORD -h $RDS_HOST -e "ALTER USER '$RDS_USERNAME'@'%' REQUIRE SSL;"
          sudo cp /home/ubuntu/.env /home/ubuntu/a5/.env
          sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s
          
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties: 
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DNSRecordName
      ResourceRecords:
      - !GetAtt EC2Instance.PublicIp
      TTL: 60
      Type: A
  
Outputs:
  VPC:
    Description: VPC ID
    Export:
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPC
  PublicSubnet1:
    Description: Public Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: Public Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2
    Value: !Ref PublicSubnet2
  PublicSubnet3:
    Description: Public Subnet 3 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet3
    Value: !Ref PublicSubnet3
  PrivateSubnet1:
    Description: Private Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Description: Private Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2
    Value: !Ref PrivateSubnet2
  PrivateSubnet3:
    Description: Private Subnet 3 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3
    Value: !Ref PrivateSubnet3
  
  EC2InstanceSecurityGroup:
    Description: EC2 Instance Security Group of the newly created EC2 instance
    Export:
      Name: !Sub ${AWS::StackName}-EC2InstanceSecurityGroup
    Value: !Ref EC2InstanceSecurityGroup
  
  DBSecurityGroup:
    Description: DB Security Group
    Export:
      Name: !Sub ${AWS::StackName}-DBSecurityGroup
    Value: !Ref DBSecurityGroup

  S3Bucket:
    Description: S3 Bucket
    Export:
      Name: !Sub ${AWS::StackName}-S3Bucket
    Value: !Ref S3Bucket

  RDSParameterGroup:
    Description: RDS Parameter Group
    Export:
      Name: !Sub ${AWS::StackName}-RDSParameterGroup
    Value: !Ref RDSParameterGroup
  
  RDSSubnetGroup:
    Description: RDS Subnet Group
    Export:
      Name: !Sub ${AWS::StackName}-RDSSubnetGroup
    Value: !Ref RDSSubnetGroup

  RDSInstance:
    Description: RDS Instance
    Export:
      Name: !Sub ${AWS::StackName}-RDSInstance
    Value: !Ref RDSInstance

  EC2InstanceIAMRole:
    Description: EC2 Instance IAM Role
    Export:
      Name: !Sub ${AWS::StackName}-EC2InstanceIAMRole
    Value: !Ref EC2InstanceIAMRole
  
  EC2InstanceProfile:
    Description: EC2 Instance Profile
    Export:
      Name: !Sub ${AWS::StackName}-EC2InstanceProfile
    Value: !Ref EC2InstanceProfile

  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Export:
      Name: !Sub ${AWS::StackName}-EC2Instance
    Value: !Ref EC2Instance